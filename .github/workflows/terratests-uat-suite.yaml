name: terratests-uat-suite

on:
  pull_request:
  workflow_dispatch:

jobs:
  test-PNFV:
    name: Setup UAT PNFV Tests
    runs-on: ubuntu-latest
    env:
      TF_VAR_equinix_client_id: ${{ secrets.EQUINIX_CLIENT_ID_PNFV }}
      TF_VAR_equinix_client_secret: ${{ secrets.EQUINIX_CLIENT_SECRET_PNFV }}
      EQUINIX_API_ENDPOINT: "https://uatapi.equinix.com"
      TEST_DATA_UAT_PORT_2_ALIBABA_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_ALIBABA_CONNECTION }}
      TEST_DATA_UAT_VIRTUAL_DEVICE_2_AZURE_CONNECTION: ${{ secrets.TEST_DATA_UAT_VIRTUAL_DEVICE_2_AZURE_CONNECTION }}
      TEST_DATA_UAT_VIRTUAL_DEVICE_2_PORT_CONNECTION: ${{ secrets.TEST_DATA_UAT_VIRTUAL_DEVICE_2_PORT_CONNECTION }}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Setup Variables Files
        run: |
          echo $TEST_DATA_UAT_PORT_2_ALIBABA_CONNECTION >> "./examples/port-2-alibaba-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_VIRTUAL_DEVICE_2_AZURE_CONNECTION >> "./tests/examples-without-external-providers/virtual-device-2-azure-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_VIRTUAL_DEVICE_2_PORT_CONNECTION >> "./tests/examples-without-external-providers/virtual-device-2-port-connection/terraform.tfvars.json"

      #      - name: Run Go Tests
      #        run:
      #          go test ./tests/uat -json -v -coverprofile coverage_uat_modules.txt -covermode=atomic -count 1 -parallel 8 -run "(PNFV)" -timeout 180m | tee pnfv_test_output.log

      - name: Upload PNFV Testing Log
        uses: actions/upload-artifact@v4
        with:
          name: pnfv_test_logs
          path: pnfv_test_output.log

      - name: Check if Tests are passed
        run: sh scripts/check_tests.sh output.log

  test-PFCR:
    name: Setup UAT PFCR Tests
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      actions: write
      contents: read
    env:
      TF_VAR_equinix_client_id: ${{ secrets.EQUINIX_CLIENT_ID_PFCR }}
      TF_VAR_equinix_client_secret: ${{ secrets.EQUINIX_CLIENT_SECRET_PFCR }}
      EQUINIX_API_ENDPOINT: "https://uatapi.equinix.com"
      EQUINIX_STS_ENDPOINT: "https://sts.uat.equinix.com"
      TEST_DATA_UAT_PORT_2_AWS_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_AWS_CONNECTION }}
      TEST_DATA_UAT_PORT_2_AZURE_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_AZURE_CONNECTION }}
      TEST_DATA_UAT_PORT_2_IBM2_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_IBM2_CONNECTION }}
      TEST_DATA_UAT_PORT_2_PORT_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_PORT_CONNECTION }}
      TEST_DATA_UAT_PORT_2_PRIVATE_SERVICE_PROFILE_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_PRIVATE_SERVICE_PROFILE_CONNECTION }}
      TEST_DATA_UAT_PORT_2_PUBLIC_SERVICE_PROFILE_CONNECTION: ${{ secrets.TEST_DATA_UAT_PORT_2_PUBLIC_SERVICE_PROFILE_CONNECTION }}
      TEST_DATA_UAT_CLOUD_ROUTER_2_AWS_CONNECTION: ${{secrets.TEST_DATA_UAT_CLOUD_ROUTER_2_AWS_CONNECTION}}
      TEST_DATA_UAT_CLOUD_ROUTER_2_AZURE_CONNECTION: ${{secrets.TEST_DATA_UAT_CLOUD_ROUTER_2_AZURE_CONNECTION}}
      TEST_DATA_UAT_CLOUD_ROUTER_2_PORT_ROUTING_PROTOCOL_AND_ROUTE_FILTER_CONNECTION: ${{secrets.TEST_DATA_UAT_CLOUD_ROUTER_2_PORT_ROUTING_PROTOCOL_AND_ROUTE_FILTER_CONNECTION}}
      TEST_DATA_UAT_CLOUD_ROUTER_2_SERVICE_PROFILE_CONNECTION: ${{secrets.TEST_DATA_UAT_CLOUD_ROUTER_2_SERVICE_PROFILE_CONNECTION}}
      TEST_DATA_UAT_CLOUD_ROUTER_2_WAN_CONNECTION: ${{secrets.TEST_DATA_UAT_CLOUD_ROUTER_2_WAN_CONNECTION}}
      TEST_DATA_UAT_CLOUD_ROUTER_2_VIRTUAL_DEVICE_CONNECTION: ${{secrets.TEST_DATA_UAT_CLOUD_ROUTER_2_VIRTUAL_DEVICE_CONNECTION}}
      TEST_DATA_UAT_STREAM_DATADOG_SUBSCRIPTION: ${{ secrets.TEST_DATA_UAT_STREAM_DATADOG_SUBSCRIPTION }}
      TEST_DATA_UAT_STREAM_MSTEAMS_SUBSCRIPTION: ${{ secrets.TEST_DATA_UAT_STREAM_MSTEAMS_SUBSCRIPTION }}
      TEST_DATA_UAT_STREAM_PAGERDUTY_SUBSCRIPTION: ${{ secrets.TEST_DATA_UAT_STREAM_PAGERDUTY_SUBSCRIPTION }}
      TEST_DATA_UAT_STREAM_SLACK_SUBSCRIPTION: ${{ secrets.TEST_DATA_UAT_STREAM_SLACK_SUBSCRIPTION }}
      TEST_DATA_UAT_STREAM_SPLUNK_SUBSCRIPTION: ${{ secrets.TEST_DATA_UAT_STREAM_SPLUNK_SUBSCRIPTION }}
      TEST_DATA_UAT_STREAM_MULTIPLE_SUBSCRIPTIONS_AND_ATTACHMENT: ${{ secrets.TEST_DATA_UAT_STREAM_MULTIPLE_SUBSCRIPTIONS_AND_ATTACHMENT }}
      TEST_DATA_UAT_VIRTUAL_DEVICE_2_AWS_CONNECTION: ${{secrets.TEST_DATA_UAT_VIRTUAL_DEVICE_2_AWS_CONNECTION}}
      TEST_DATA_UAT_PORT_2_PORT_CONNECTION_STS: ${{ secrets.TEST_DATA_UAT_PORT_2_PORT_CONNECTION_STS }}

    steps:
      - id: get_id_token
        name: Get GitHub OIDC Token for PFCR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.request('PUT /repos/{owner}/{repo}/actions/oidc/customization/sub', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                use_default: false,
                include_claim_keys: ['workflow'],
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              });
            
              console.log('Custom OIDC subject template configured');
              const idToken = await core.getIDToken('gha-fcr-client');
              console.log('Token generated with custom subject and audience');
              core.setOutput('id_token', idToken);
            } catch (error) {
              console.error('Error updating OIDC template:', error.message);
              core.setFailed(`Failed to update OIDC template: ${error.message}`);
            }
          result-encoding: string

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './go.mod'
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Build provider from branch - for testing in GHA
        run: |
          git clone -b fabric-sts-support https://github.com/equinix/terraform-provider-equinix.git
          cd terraform-provider-equinix
          make build -o terraform-provider-equinix
          
          PLUGIN_DIR="$HOME/.terraform.d/plugins/developer.equinix.com/terraform/equinix/9.0.0/linux_amd64"
          mkdir -p "$PLUGIN_DIR"
          mv terraform-provider-equinix "$PLUGIN_DIR/terraform-provider-equinix"
          chmod +x "$PLUGIN_DIR/terraform-provider-equinix"          

      - name: UAT PFCR tests STS creds
        timeout-minutes: 180
        env:
          TF_ACC: "1"
          TF_VAR_sts_source_token: ${{ steps.get_id_token.outputs.id_token }}
          TF_VAR_sts_auth_scope: "roleassignments:405153000683548"
          METAL_AUTH_TOKEN: ${{ secrets.METAL_AUTH_TOKEN }}
        run: |
          echo $TEST_DATA_UAT_PORT_2_PORT_CONNECTION_STS >> "./examples/port-2-port-connection-sts-token/terraform.tfvars.json"
          go test ./tests/uat/uat_sanity_suite_test.go -v -run ^TestPort2PortCreateConnection_STS_PFCR$     

      - name: Setup Variables Files
        run: |
          echo $TEST_DATA_UAT_PORT_2_AWS_CONNECTION >> "./tests/examples-without-external-providers/port-2-aws-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_PORT_2_AZURE_CONNECTION >> "./tests/examples-without-external-providers/port-2-azure-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_PORT_2_IBM2_CONNECTION >> "./tests/examples-without-external-providers/port-2-ibm2-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_PORT_2_PORT_CONNECTION >> "./examples/port-2-port-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_PORT_2_PRIVATE_SERVICE_PROFILE_CONNECTION >> "./examples/port-2-private-service-profile-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_PORT_2_PUBLIC_SERVICE_PROFILE_CONNECTION >> "./examples/port-2-public-service-profile-connection/terraform.tfvars.json"   

          echo $TEST_DATA_UAT_CLOUD_ROUTER_2_AWS_CONNECTION >> "./tests/examples-without-external-providers/cloud-router-2-aws-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_CLOUD_ROUTER_2_AZURE_CONNECTION >> "./tests/examples-without-external-providers/cloud-router-2-azure-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_CLOUD_ROUTER_2_PORT_ROUTING_PROTOCOL_AND_ROUTE_FILTER_CONNECTION  >> "./tests/examples-without-external-providers/cloud-router-2-port-connection-with-routing-protocols-and-route-filters/terraform.tfvars.json"
          echo $TEST_DATA_UAT_CLOUD_ROUTER_2_SERVICE_PROFILE_CONNECTION >> "./examples/cloud-router-2-service-profile-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_CLOUD_ROUTER_2_WAN_CONNECTION >> "./examples/cloud-router-2-wan-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_CLOUD_ROUTER_2_VIRTUAL_DEVICE_CONNECTION >> "./examples/cloud-router-2-virtual-device-connection/terraform.tfvars.json"
          echo $TEST_DATA_UAT_VIRTUAL_DEVICE_2_AWS_CONNECTION >> "./tests/examples-without-external-providers/virtual-device-2-aws-connection/terraform.tfvars.json"
          
          echo $TEST_DATA_UAT_STREAM_DATADOG_SUBSCRIPTION >> "./examples/stream-datadog-subscription/terraform.tfvars.json"
          echo $TEST_DATA_UAT_STREAM_MSTEAMS_SUBSCRIPTION >> "./examples/stream-msteams-subscription/terraform.tfvars.json"
          echo $TEST_DATA_UAT_STREAM_PAGERDUTY_SUBSCRIPTION >> "./examples/stream-pagerduty-subscription/terraform.tfvars.json"
          echo $TEST_DATA_UAT_STREAM_SLACK_SUBSCRIPTION >> "./examples/stream-slack-subscription/terraform.tfvars.json"
          echo $TEST_DATA_UAT_STREAM_SPLUNK_SUBSCRIPTION >> "./examples/stream-splunk-subscription/terraform.tfvars.json"
          echo $TEST_DATA_UAT_STREAM_MULTIPLE_SUBSCRIPTIONS_AND_ATTACHMENT >> "./examples/stream-multiple-subscriptions-with-port-connection-attachment/terraform.tfvars.json" 

      - name: Run Go Tests
        run:
          go test ./tests/uat -json -v -count 1 -parallel 8 -run "(PFCR)" -timeout 180m | tee pfcr_test_output.log

      - name: Upload PFCR Testing Log
        uses: actions/upload-artifact@v4
        with:
          name: pfcr_test_logs
          path: pfcr_test_output.log

      - name: Check if Tests are passed
        run: sh scripts/check_tests.sh output.log

  upload-test-report:
    name: Upload Testing Report
    if: always()
    needs: [test-PNFV, test-PFCR]
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        id: go

      - name: Set up Python3
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Get dependencies
        run: |
          go install github.com/thogarty/go-junit-report/v2@latest
          pip3 install junit2html

      - name: Download PNFV Test Logs
        uses: actions/download-artifact@v4
        with:
          name: pnfv_test_logs

      - name: Download PFCR Test Logs
        uses: actions/download-artifact@v4
        with:
          name: pfcr_test_logs

      - name: Create HTML Testing Report
        run: |
          cat pfcr_test_output.log pnfv_test_output.log > uat_sanity_report.log
          go-junit-report -parser gojson -in uat_sanity_report.log  > uat_sanity_report.xml && python3 -m junit2htmlreport uat_sanity_report.xml uat_sanity_report.html

      - name: Upload HTML Testing Report
        uses: actions/upload-artifact@v4
        with:
          name: UAT Terraform Modules Testing Report
          path: uat_sanity_report.html
          compression-level: 0